{"version":3,"sources":["components/TopHeader.js","components/ProductItem.js","components/ProductList.js","reducer/product.js","container/ProductList.js","App.js","reducer/index.js","store/store.js","serviceWorker.js","index.js"],"names":["TopHeader","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","ProductItem","item","display_name","ProductList","products","Container","map","Row","Col","key","sm","data","initState","productReducer","state","action","console","log","mapActionToProps","addNewProduct","payload","connect","App","reducer","combineReducers","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"si0GAGe,SAASA,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAC/B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,oBAGJ,kBAACY,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASV,UAAU,YACxD,kBAACW,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,a,oCCZGC,EARK,SAAC,GAAa,IAAZC,EAAW,EAAXA,KAClB,OACI,6BACKA,EAAKC,eCeHC,EAhBK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,6BACE,kBAACC,EAAA,EAAD,KACID,EAASE,KAAI,SAAAL,GAAI,OACf,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAKR,EAAKhB,GAAIyB,GAAI,GACnB,kBAAC,EAAD,CAAaC,KAAMV,Y,gBCNjCW,EAAY,CAChBR,S,UAqBaS,EAbQ,WAAgC,IAA/BC,EAA8B,uDAAtBF,EAAWG,EAAW,uCACpD,OAAQA,EAAOnB,MACb,IAbiB,eAef,OADEoB,QAAQC,IAAIH,GACP,eACFA,GAGP,QACE,OAAOA,IChBPI,EAAmB,CACrBC,cDCyB,SAACR,GAAD,MAAW,CACpCf,KAPiB,eAQjBwB,QAAST,KCDEU,eAPS,SAACP,GAAD,MAAY,CAChCV,SAAUU,EAAMV,SAASA,YAMWc,EAAzBG,CAA2ClB,GCK3CmB,MATf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAACX,EAAD,MACA,kBAAC,EAAD,Q,QCJS+C,EAHCC,YAAgB,CAC5BpB,SAAUS,ICDDY,EAAQC,YAAYH,GCSbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,OAEFS,SAASC,eAAe,SDuHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0139f7c5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavDropdown, Navbar, Form, Nav, FormControl, Button } from \"react-bootstrap\"\r\n\r\nexport default function TopHeader() {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-success\">Search</Button>\r\n          </Form>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nconst ProductItem = ({item}) =>  {\r\n    return (\r\n        <div>\r\n            {item.display_name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductItem;\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport ProductItem from \"./ProductItem\"\r\n\r\nconst ProductList = ({ products }) => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        { products.map(item => \r\n            <Row>\r\n                <Col key={item.id} sm={4}>\r\n                    <ProductItem data={item} />\r\n                </Col>\r\n            </Row>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import * as productData from \"data/product.json\";\r\n\r\n// CONSTANT\r\nconst ADD_NEW_ITEM = \"ADD_NEW_ITEM\";\r\n\r\nconst initState = {\r\n  products: productData,\r\n};\r\n\r\nexport const addNewProduct = (data) => ({\r\n    type: ADD_NEW_ITEM,\r\n    payload: data\r\n})\r\n\r\nconst productReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ADD_NEW_ITEM:\r\n        console.log(state);\r\n      return {\r\n        ...state,\r\n        // products: [...products, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default productReducer;\r\n","import { connect } from \"react-redux\";\r\nimport ProductList from \"components/ProductList\";\r\nimport { addNewProduct } from \"reducer/product\"\r\nconst mapStateToProps = (state) => ({\r\n    products: state.products.products\r\n})\r\n\r\nconst mapActionToProps = {\r\n    addNewProduct\r\n}\r\nexport default connect(mapStateToProps, mapActionToProps)(ProductList)","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TopHeader from \"components/TopHeader\";\r\nimport ProductList from \"container/ProductList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TopHeader />\r\n      <ProductList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport productReducer from \"./product\";\r\n\r\nconst reducer = combineReducers({\r\n    products: productReducer,\r\n})\r\nexport default reducer;","import { createStore } from \"redux\";\r\nimport reducer from \"reducer/index\";\r\n\r\nexport const store = createStore(reducer)","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\"\r\nimport { store } from \"./store/store\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}